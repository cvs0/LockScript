{"version":3,"file":"server.legacy.fixtures.js","names":["_fastify","_interopRequireDefault","require","_swagger","_httpErrors","_","_models","obj","__esModule","default","createLegacyTestServer","fastifyOptions","buildJsonSchemasOptions","swaggerOptions","f","fastify","register","fastifySwagger","withRefResolver","$ref","schemas","buildJsonSchemas","models","schema","addSchema","state","todoItems","get","operationId","response","done","filter","item","inProgress","todo","post","body","nextItem","some","prevItem","id","BadRequest","put","params","NotFound","map","exports"],"sources":["../../src/__tests__/server.legacy.fixtures.ts"],"sourcesContent":["import fastify, { FastifyInstance, FastifyServerOptions } from \"fastify\";\nimport fastifySwagger, { FastifyDynamicSwaggerOptions } from \"@fastify/swagger\";\nimport { NotFound, BadRequest } from \"http-errors\";\n\nimport { buildJsonSchemas, withRefResolver } from \"..\";\nimport { BuildJsonSchemasOptions } from \"../JsonSchema\";\n\nimport {\n  models,\n  TodoItem,\n  TodoItemId,\n  TodoItems,\n  TodoItemsGroupedByStatus,\n} from \"./models.fixtures\";\n\nexport const createLegacyTestServer = (\n  fastifyOptions: FastifyServerOptions,\n  buildJsonSchemasOptions: BuildJsonSchemasOptions,\n  swaggerOptions: FastifyDynamicSwaggerOptions,\n): FastifyInstance => {\n  const f = fastify(fastifyOptions);\n\n  f.register(fastifySwagger, withRefResolver(swaggerOptions));\n\n  const { $ref, schemas } = buildJsonSchemas(models, buildJsonSchemasOptions);\n\n  for (const schema of schemas) {\n    f.addSchema(schema);\n  }\n\n  const state: TodoItems = {\n    todoItems: [],\n  };\n\n  f.get<{\n    Reply: TodoItems;\n  }>(\n    `/item`,\n    {\n      schema: {\n        operationId: `getTodoItems`,\n        response: {\n          200: $ref(`TodoItems`),\n        },\n      },\n    },\n    async () => state,\n  );\n\n  f.get<{\n    Reply: TodoItemsGroupedByStatus;\n  }>(\n    `/item/grouped-by-status`,\n    {\n      schema: {\n        operationId: `getTodoItemsGroupedByStatus`,\n        response: {\n          200: $ref(`TodoItemsGroupedByStatus`),\n        },\n      },\n    },\n    async () => ({\n      done: state.todoItems.filter((item) => item.state === `done`),\n      inProgress: state.todoItems.filter(\n        (item) => item.state === `in progress`,\n      ),\n      todo: state.todoItems.filter((item) => item.state === `todo`),\n    }),\n  );\n\n  f.post<{\n    Body: TodoItem;\n    Reply: TodoItems;\n  }>(\n    `/item`,\n    {\n      schema: {\n        operationId: `postTodoItem`,\n        body: $ref(`TodoItem`),\n        response: {\n          200: $ref(`TodoItems`),\n        },\n      },\n    },\n    async ({ body: nextItem }) => {\n      if (state.todoItems.some((prevItem) => prevItem.id === nextItem.id)) {\n        throw new BadRequest(`item already exists`);\n      }\n      state.todoItems = [...state.todoItems, nextItem];\n      return state;\n    },\n  );\n\n  f.put<{\n    Body: TodoItem;\n    Params: TodoItemId;\n    Reply: TodoItem;\n  }>(\n    `/item/:id`,\n    {\n      schema: {\n        operationId: `putTodoItem`,\n        body: $ref(`TodoItem`),\n        params: $ref(`TodoItemId`),\n        response: {\n          200: $ref(`TodoItem`),\n        },\n      },\n    },\n    async ({ params: { id }, body: nextItem }) => {\n      if (!state.todoItems.some((prevItem) => prevItem.id === id)) {\n        throw new NotFound(`no such item`);\n      }\n      state.todoItems = state.todoItems.map((prevItem) =>\n        prevItem.id === id ? nextItem : prevItem,\n      );\n      return nextItem;\n    },\n  );\n\n  return f;\n};\n"],"mappings":";;;;;;AAAA,IAAAA,QAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,QAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,WAAA,GAAAF,OAAA;AAEA,IAAAG,CAAA,GAAAH,OAAA;AAGA,IAAAI,OAAA,GAAAJ,OAAA;AAM2B,SAAAD,uBAAAM,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAEpB,MAAMG,sBAAsB,GAAGA,CACpCC,cAAoC,EACpCC,uBAAgD,EAChDC,cAA4C,KACxB;EACpB,MAAMC,CAAC,GAAG,IAAAC,gBAAO,EAACJ,cAAc,CAAC;EAEjCG,CAAC,CAACE,QAAQ,CAACC,gBAAc,EAAE,IAAAC,iBAAe,EAACL,cAAc,CAAC,CAAC;EAE3D,MAAM;IAAEM,IAAI;IAAEC;EAAQ,CAAC,GAAG,IAAAC,kBAAgB,EAACC,cAAM,EAAEV,uBAAuB,CAAC;EAE3E,KAAK,MAAMW,MAAM,IAAIH,OAAO,EAAE;IAC5BN,CAAC,CAACU,SAAS,CAACD,MAAM,CAAC;EACrB;EAEA,MAAME,KAAgB,GAAG;IACvBC,SAAS,EAAE;EACb,CAAC;EAEDZ,CAAC,CAACa,GAAG,CAGF,OAAM,EACP;IACEJ,MAAM,EAAE;MACNK,WAAW,EAAG,cAAa;MAC3BC,QAAQ,EAAE;QACR,GAAG,EAAEV,IAAI,CAAE,WAAU;MACvB;IACF;EACF,CAAC,EACD,YAAYM,KACd,CAAC;EAEDX,CAAC,CAACa,GAAG,CAGF,yBAAwB,EACzB;IACEJ,MAAM,EAAE;MACNK,WAAW,EAAG,6BAA4B;MAC1CC,QAAQ,EAAE;QACR,GAAG,EAAEV,IAAI,CAAE,0BAAyB;MACtC;IACF;EACF,CAAC,EACD,aAAa;IACXW,IAAI,EAAEL,KAAK,CAACC,SAAS,CAACK,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACP,KAAK,KAAM,MAAK,CAAC;IAC7DQ,UAAU,EAAER,KAAK,CAACC,SAAS,CAACK,MAAM,CAC/BC,IAAI,IAAKA,IAAI,CAACP,KAAK,KAAM,aAC5B,CAAC;IACDS,IAAI,EAAET,KAAK,CAACC,SAAS,CAACK,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACP,KAAK,KAAM,MAAK;EAC9D,CAAC,CACH,CAAC;EAEDX,CAAC,CAACqB,IAAI,CAIH,OAAM,EACP;IACEZ,MAAM,EAAE;MACNK,WAAW,EAAG,cAAa;MAC3BQ,IAAI,EAAEjB,IAAI,CAAE,UAAS,CAAC;MACtBU,QAAQ,EAAE;QACR,GAAG,EAAEV,IAAI,CAAE,WAAU;MACvB;IACF;EACF,CAAC,EACD,OAAO;IAAEiB,IAAI,EAAEC;EAAS,CAAC,KAAK;IAC5B,IAAIZ,KAAK,CAACC,SAAS,CAACY,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,EAAE,KAAKH,QAAQ,CAACG,EAAE,CAAC,EAAE;MACnE,MAAM,IAAIC,sBAAU,CAAE,qBAAoB,CAAC;IAC7C;IACAhB,KAAK,CAACC,SAAS,GAAG,CAAC,GAAGD,KAAK,CAACC,SAAS,EAAEW,QAAQ,CAAC;IAChD,OAAOZ,KAAK;EACd,CACF,CAAC;EAEDX,CAAC,CAAC4B,GAAG,CAKF,WAAU,EACX;IACEnB,MAAM,EAAE;MACNK,WAAW,EAAG,aAAY;MAC1BQ,IAAI,EAAEjB,IAAI,CAAE,UAAS,CAAC;MACtBwB,MAAM,EAAExB,IAAI,CAAE,YAAW,CAAC;MAC1BU,QAAQ,EAAE;QACR,GAAG,EAAEV,IAAI,CAAE,UAAS;MACtB;IACF;EACF,CAAC,EACD,OAAO;IAAEwB,MAAM,EAAE;MAAEH;IAAG,CAAC;IAAEJ,IAAI,EAAEC;EAAS,CAAC,KAAK;IAC5C,IAAI,CAACZ,KAAK,CAACC,SAAS,CAACY,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,EAAE,KAAKA,EAAE,CAAC,EAAE;MAC3D,MAAM,IAAII,oBAAQ,CAAE,cAAa,CAAC;IACpC;IACAnB,KAAK,CAACC,SAAS,GAAGD,KAAK,CAACC,SAAS,CAACmB,GAAG,CAAEN,QAAQ,IAC7CA,QAAQ,CAACC,EAAE,KAAKA,EAAE,GAAGH,QAAQ,GAAGE,QAClC,CAAC;IACD,OAAOF,QAAQ;EACjB,CACF,CAAC;EAED,OAAOvB,CAAC;AACV,CAAC;AAACgC,OAAA,CAAApC,sBAAA,GAAAA,sBAAA"}