{"version":3,"file":"buildJsonSchemas.test.js","names":["_zod","require","_","helpers","target","$schema","constOrEnum","value","enum","stringEnum","values","anyOf","map","type","const","exports","describe","undefined","test","models","ZString","z","string","ZStringMin","min","ZDate","date","ZLiteral","literal","ZUuid","uuid","schemas","$ref","buildJsonSchemas","expect","toEqual","$id","properties","minLength","format","required","additionalProperties","NativeEnum","schema","ZEnum","ZNativeEnum","nativeEnum","ZObject","object","name","age","number","optional","ZObjectPartial","partial","ZArray","array","ZArrayMinMax","max","items","minItems","maxItems","ZTuple","tuple","ZUnion","union","ZRecord","record","ZIntersection","intersection","allOf","minimum","maximum","TodoItem","itemId","label","state","dueDate","TodoList","TodoItemState","id"],"sources":["../../src/__tests__/buildJsonSchemas.test.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport { buildJsonSchemas } from \"..\";\ntype Helpers = {\n  $schema: Record<string, unknown>;\n  constOrEnum: (value: unknown) => Record<string, unknown>;\n  stringEnum: (values: unknown[]) => Record<string, unknown>;\n  target?: `jsonSchema7` | `openApi3`;\n};\n\nexport const helpers = (\n  target: `jsonSchema7` | `openApi3` | undefined,\n): Helpers => {\n  if (target === `openApi3`) {\n    return {\n      $schema: {},\n      constOrEnum: (value) => ({\n        enum: [value],\n      }),\n      stringEnum: (values) => ({\n        anyOf: values.map((value) => ({\n          type: `string`,\n          enum: [value],\n        })),\n      }),\n      target,\n    };\n  }\n  if (target === `jsonSchema7`) {\n    return {\n      $schema: { $schema: `http://json-schema.org/draft-07/schema#` },\n      constOrEnum: (value) => ({ const: value }),\n      stringEnum: (values) => ({\n        type: `string`,\n        enum: values,\n      }),\n      target,\n    };\n  }\n  return {\n    $schema: {},\n    constOrEnum: (value) => ({ const: value }),\n    stringEnum: (values) => ({\n      type: `string`,\n      enum: values,\n    }),\n  };\n};\n\ndescribe(`buildJsonSchemas`, () => {\n  for (const target of [`jsonSchema7`, `openApi3`, undefined] as const) {\n    const { $schema, constOrEnum, stringEnum } = helpers(target);\n    describe(`target: ${target ?? `none`}`, () => {\n      test(`primitives`, () => {\n        const models = {\n          ZString: z.string(),\n          ZStringMin: z.string().min(42),\n          ZDate: z.date(),\n          ZLiteral: z.literal(42),\n          ZUuid: z.string().uuid(),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, {\n          target,\n        });\n\n        expect($ref(`ZString`)).toEqual({ $ref: `Schema#/properties/ZString` });\n\n        expect($ref(`ZStringMin`)).toEqual({\n          $ref: `Schema#/properties/ZStringMin`,\n        });\n\n        expect($ref(`ZDate`)).toEqual({ $ref: `Schema#/properties/ZDate` });\n\n        expect($ref(`ZLiteral`)).toEqual({\n          $ref: `Schema#/properties/ZLiteral`,\n        });\n\n        expect($ref(`ZUuid`)).toEqual({ $ref: `Schema#/properties/ZUuid` });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZString: {\n                type: `string`,\n              },\n              ZStringMin: {\n                type: `string`,\n                minLength: 42,\n              },\n              ZDate: {\n                type: `string`,\n                format: `date-time`,\n              },\n              ZLiteral: {\n                type: `number`,\n                ...constOrEnum(42),\n              },\n              ZUuid: {\n                type: `string`,\n                format: `uuid`,\n              },\n            },\n            required: [`ZString`, `ZStringMin`, `ZDate`, `ZLiteral`, `ZUuid`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`enums`, () => {\n        enum NativeEnum {\n          One = `one`,\n          Two = `two`,\n          Three = `three`,\n        }\n\n        const schema = {\n          ZEnum: z.enum([`one`, `two`, `three`]),\n          ZNativeEnum: z.nativeEnum(NativeEnum),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(schema, {\n          target,\n        });\n\n        expect($ref(`ZEnum`)).toEqual({ $ref: `Schema#/properties/ZEnum` });\n\n        expect($ref(`ZNativeEnum`)).toEqual({\n          $ref: `Schema#/properties/ZNativeEnum`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZEnum: {\n                type: `string`,\n                enum: [`one`, `two`, `three`],\n              },\n              ZNativeEnum: {\n                type: `string`,\n                enum: [`one`, `two`, `three`],\n              },\n            },\n            required: [`ZEnum`, `ZNativeEnum`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`objects`, () => {\n        const models = {\n          ZObject: z.object({\n            name: z.string(),\n            age: z.number(),\n            uuid: z.string().uuid().optional(),\n          }),\n          ZObjectPartial: z\n            .object({\n              name: z.string(),\n              age: z.number(),\n              uuid: z.string().uuid().optional(),\n            })\n            .partial(),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZObject`)).toEqual({ $ref: `Schema#/properties/ZObject` });\n\n        expect($ref(`ZObjectPartial`)).toEqual({\n          $ref: `Schema#/properties/ZObjectPartial`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZObject: {\n                type: `object`,\n                properties: {\n                  name: {\n                    type: `string`,\n                  },\n                  age: {\n                    type: `number`,\n                  },\n                  uuid: {\n                    type: `string`,\n                    format: `uuid`,\n                  },\n                },\n                required: [`name`, `age`],\n                additionalProperties: false,\n              },\n              ZObjectPartial: {\n                type: `object`,\n                properties: {\n                  name: {\n                    type: `string`,\n                  },\n                  age: {\n                    type: `number`,\n                  },\n                  uuid: {\n                    type: `string`,\n                    format: `uuid`,\n                  },\n                },\n                additionalProperties: false,\n              },\n            },\n            required: [`ZObject`, `ZObjectPartial`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`arrays`, () => {\n        const models = {\n          ZArray: z.array(z.string()),\n          ZArrayMinMax: z.array(z.string()).min(5).max(12),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZArray`)).toEqual({ $ref: `Schema#/properties/ZArray` });\n\n        expect($ref(`ZArrayMinMax`)).toEqual({\n          $ref: `Schema#/properties/ZArrayMinMax`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZArray: {\n                type: `array`,\n                items: {\n                  type: `string`,\n                },\n              },\n              ZArrayMinMax: {\n                type: `array`,\n                items: {\n                  type: `string`,\n                },\n                minItems: 5,\n                maxItems: 12,\n              },\n            },\n            required: [`ZArray`, `ZArrayMinMax`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`tuples`, () => {\n        const models = {\n          ZTuple: z.tuple([z.string(), z.number(), z.literal(42)]),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZTuple`)).toEqual({ $ref: `Schema#/properties/ZTuple` });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZTuple: {\n                type: `array`,\n                minItems: 3,\n                maxItems: 3,\n                items: [\n                  {\n                    type: `string`,\n                  },\n                  {\n                    type: `number`,\n                  },\n                  {\n                    type: `number`,\n                    ...constOrEnum(42),\n                  },\n                ],\n              },\n            },\n            required: [`ZTuple`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`unions`, () => {\n        const models = {\n          ZUnion: z.union([z.string(), z.number(), z.literal(42)]),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZUnion`)).toEqual({ $ref: `Schema#/properties/ZUnion` });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZUnion: {\n                anyOf: [\n                  {\n                    type: `string`,\n                  },\n                  {\n                    type: `number`,\n                  },\n                  {\n                    type: `number`,\n                    ...constOrEnum(42),\n                  },\n                ],\n              },\n            },\n            required: [`ZUnion`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`records`, () => {\n        const models = {\n          ZRecord: z.record(z.number()),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZRecord`)).toEqual({ $ref: `Schema#/properties/ZRecord` });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZRecord: {\n                type: `object`,\n                additionalProperties: { type: `number` },\n              },\n            },\n            required: [`ZRecord`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`intersections`, () => {\n        const models = {\n          ZIntersection: z.intersection(z.number().min(2), z.number().max(12)),\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`ZIntersection`)).toEqual({\n          $ref: `Schema#/properties/ZIntersection`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              ZIntersection: {\n                allOf: [\n                  { type: `number`, minimum: 2 },\n                  { type: `number`, maximum: 12 },\n                ],\n              },\n            },\n            required: [`ZIntersection`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`composite`, () => {\n        const TodoItem = z.object({\n          itemId: z.number(),\n          label: z.string(),\n          state: z.union([\n            z.literal(`todo`),\n            z.literal(`in progress`),\n            z.literal(`done`),\n          ]),\n          dueDate: z.string().optional(),\n        });\n\n        const TodoList = z.array(TodoItem);\n\n        const models = {\n          TodoList,\n        };\n\n        const { schemas, $ref } = buildJsonSchemas(models, { target });\n\n        expect($ref(`TodoList`)).toEqual({\n          $ref: `Schema#/properties/TodoList`,\n        });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              TodoList: {\n                type: `array`,\n                items: {\n                  type: `object`,\n                  properties: {\n                    itemId: { type: `number` },\n                    label: { type: `string` },\n                    state: stringEnum([`todo`, `in progress`, `done`]),\n                    dueDate: { type: `string` },\n                  },\n                  required: [`itemId`, `label`, `state`],\n                  additionalProperties: false,\n                },\n              },\n            },\n            required: [`TodoList`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n\n      test(`references`, () => {\n        const TodoItemState = z.enum([`todo`, `in progress`, `done`]);\n\n        const TodoItem = z.object({\n          id: z.number(),\n          label: z.string(),\n          state: TodoItemState,\n        });\n\n        const TodoList = z.array(TodoItem);\n\n        const schema = {\n          TodoItemState,\n          TodoItem,\n          TodoList,\n        };\n\n        const { schemas } = buildJsonSchemas(schema, { target });\n\n        expect(schemas).toEqual([\n          {\n            $id: `Schema`,\n            ...$schema,\n            type: `object`,\n            properties: {\n              TodoItemState: {\n                type: `string`,\n                enum: [`todo`, `in progress`, `done`],\n              },\n              TodoItem: {\n                type: `object`,\n                properties: {\n                  id: { type: `number` },\n                  label: { type: `string` },\n                  state: { $ref: `Schema#/properties/TodoItemState` },\n                },\n                required: [`id`, `label`, `state`],\n                additionalProperties: false,\n              },\n              TodoList: {\n                type: `array`,\n                items: { $ref: `Schema#/properties/TodoItem` },\n              },\n            },\n            required: [`TodoItemState`, `TodoItem`, `TodoList`],\n            additionalProperties: false,\n          },\n        ]);\n      });\n    });\n  }\n});\n"],"mappings":"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"}