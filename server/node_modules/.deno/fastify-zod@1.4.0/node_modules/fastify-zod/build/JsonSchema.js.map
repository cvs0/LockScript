{"version":3,"file":"JsonSchema.js","names":["_zod","require","_zodToJsonSchema","_interopRequireDefault","obj","__esModule","default","buildJsonSchema","Type","schemaKey","buildJsonSchemas","$id","schemas","exports","models","opts","zodSchema","z","object","zodJsonSchema","zodToJsonSchema","target","basePath","errorMessages","jsonSchema","$ref","key","description"],"sources":["../src/JsonSchema.ts"],"sourcesContent":["import { z, ZodType } from \"zod\";\nimport zodToJsonSchema from \"zod-to-json-schema\";\n\nimport { Models, SchemaKeyOrDescription } from \"./Models\";\nexport type BuildJsonSchemasOptions = {\n  readonly $id?: string;\n  readonly target?: `jsonSchema7` | `openApi3`;\n  readonly errorMessages?: boolean;\n};\n\nexport type $Ref<M extends Models> = (key: SchemaKeyOrDescription<M>) => {\n  readonly $ref: string;\n  readonly description?: string;\n};\n\nexport type JsonSchema = {\n  readonly $id: string;\n};\n\nexport type BuildJsonSchemasResult<M extends Models> = {\n  readonly schemas: JsonSchema[];\n  readonly $ref: $Ref<M>;\n};\n\n/**\n * @deprecated\n */\nexport const buildJsonSchema = <T>(\n  Type: ZodType<T>,\n  schemaKey: string,\n): JsonSchema =>\n  buildJsonSchemas({ [schemaKey]: Type }, { $id: schemaKey }).schemas[0];\n\nexport const buildJsonSchemas = <M extends Models>(\n  models: M,\n  opts: BuildJsonSchemasOptions = {},\n): BuildJsonSchemasResult<M> => {\n  const zodSchema = z.object(models);\n\n  const $id = opts.$id ?? `Schema`;\n\n  const zodJsonSchema = zodToJsonSchema(zodSchema, {\n    target: opts.target,\n    basePath: [`${$id}#`],\n    errorMessages: opts.errorMessages,\n  });\n\n  const jsonSchema: JsonSchema = {\n    $id,\n    ...zodJsonSchema,\n  };\n\n  const $ref: $Ref<M> = (key) => {\n    const $ref = `${$id}#/properties/${\n      typeof key === `string` ? key : key.key\n    }`;\n    return typeof key === `string`\n      ? {\n          $ref,\n        }\n      : {\n          $ref,\n          description: key.description,\n        };\n  };\n\n  return {\n    schemas: [jsonSchema],\n    $ref,\n  };\n};\n"],"mappings":";;;;;;AAAA,IAAAA,IAAA,GAAAC,OAAA;AACA,IAAAC,gBAAA,GAAAC,sBAAA,CAAAF,OAAA;AAAiD,SAAAE,uBAAAC,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAuBjD;AACA;AACA;AACO,MAAMG,eAAe,GAAGA,CAC7BC,IAAgB,EAChBC,SAAiB,KAEjBC,gBAAgB,CAAC;EAAE,CAACD,SAAS,GAAGD;AAAK,CAAC,EAAE;EAAEG,GAAG,EAAEF;AAAU,CAAC,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC;AAACC,OAAA,CAAAN,eAAA,GAAAA,eAAA;AAElE,MAAMG,gBAAgB,GAAGA,CAC9BI,MAAS,EACTC,IAA6B,GAAG,CAAC,CAAC,KACJ;EAC9B,MAAMC,SAAS,GAAGC,MAAC,CAACC,MAAM,CAACJ,MAAM,CAAC;EAElC,MAAMH,GAAG,GAAGI,IAAI,CAACJ,GAAG,IAAK,QAAO;EAEhC,MAAMQ,aAAa,GAAG,IAAAC,wBAAe,EAACJ,SAAS,EAAE;IAC/CK,MAAM,EAAEN,IAAI,CAACM,MAAM;IACnBC,QAAQ,EAAE,CAAE,GAAEX,GAAI,GAAE,CAAC;IACrBY,aAAa,EAAER,IAAI,CAACQ;EACtB,CAAC,CAAC;EAEF,MAAMC,UAAsB,GAAG;IAC7Bb,GAAG;IACH,GAAGQ;EACL,CAAC;EAED,MAAMM,IAAa,GAAIC,GAAG,IAAK;IAC7B,MAAMD,IAAI,GAAI,GAAEd,GAAI,gBAClB,OAAOe,GAAG,KAAM,QAAO,GAAGA,GAAG,GAAGA,GAAG,CAACA,GACrC,EAAC;IACF,OAAO,OAAOA,GAAG,KAAM,QAAO,GAC1B;MACED;IACF,CAAC,GACD;MACEA,IAAI;MACJE,WAAW,EAAED,GAAG,CAACC;IACnB,CAAC;EACP,CAAC;EAED,OAAO;IACLf,OAAO,EAAE,CAACY,UAAU,CAAC;IACrBC;EACF,CAAC;AACH,CAAC;AAACZ,OAAA,CAAAH,gBAAA,GAAAA,gBAAA"}