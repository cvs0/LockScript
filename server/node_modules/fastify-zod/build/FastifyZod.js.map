{"version":3,"file":"FastifyZod.js","names":["_swagger","_interopRequireDefault","require","_swaggerUi","yaml","_interopRequireWildcard","_SpecTransformer","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","withRefResolver","options","refResolver","clone","buildLocalReference","json","_baseUri","_fragment","i","$id","exports","register","f","jsonSchemas","schemas","$ref","swaggerOptions","swaggerUiOptions","transformSpec","schema","addSchema","fastifySwagger","fastifySwaggerUi","originalRoutePrefix","routePrefix","transformedRoutePrefix","fetchTransformedSpec","originalSpec","inject","method","url","then","res","t","SpecTransformer","transform","cachedTransformedSpec","getTransformedSpec","cachedTransformedSpecJson","getTransformedSpecJson","transformedSpec","JSON","stringify","cachedTransformedSpecYaml","getTransformedSpecYaml","dump","_request","reply","type","addRoute","operationId","params","body","response","querystring","handler","fastifySchema","customSchema","customSchemaResponse","code","keys","parseInt","createAddRoute","config","pluginInstance","delete","head","patch","post","put","decorate"],"sources":["../src/FastifyZod.ts"],"sourcesContent":["import { IncomingMessage, ServerResponse } from \"http\";\n\nimport {\n  FastifyInstance,\n  FastifyRequest,\n  FastifySchema,\n  HTTPMethods as FastifyHTTPMethods,\n  RouteHandlerMethod,\n  FastifyReply,\n  RawServerBase,\n} from \"fastify\";\nimport fastifySwagger, { FastifyDynamicSwaggerOptions } from \"@fastify/swagger\";\nimport fastifySwaggerUi, { FastifySwaggerUiOptions } from \"@fastify/swagger-ui\";\nimport * as yaml from \"js-yaml\";\n\nimport { SpecTransformer, TransformOptions } from \"./SpecTransformer\";\nimport { $Ref, BuildJsonSchemasResult } from \"./JsonSchema\";\nimport {\n  Models as M_,\n  SchemaKey,\n  SchemaKeyOrDescription,\n  SchemaTypeOption,\n} from \"./Models\";\n\nexport type RegisterOptions<M extends M_> = {\n  readonly jsonSchemas: BuildJsonSchemasResult<M>;\n  readonly transformSpec?: {\n    readonly cache?: boolean;\n    readonly routePrefix?: string;\n    readonly options?: TransformOptions;\n  };\n  readonly swaggerOptions?: FastifyDynamicSwaggerOptions;\n  readonly swaggerUiOptions?: false | FastifySwaggerUiOptions;\n};\n\ntype V_ = Lowercase<FastifyHTTPMethods> & keyof FastifyInstance;\n\ntype P_<M extends M_> = void | SchemaKey<M>;\ntype B_<M extends M_> = void | SchemaKey<M>;\ntype Q_<M extends M_> = void | SchemaKey<M>;\ntype R_<M extends M_> = void | SchemaKey<M>;\ntype Rx_<M extends M_> = void | Record<number, void | SchemaKey<M>>;\n\ntype FatifyZodRouteGenericInterface<\n  M extends M_,\n  P extends P_<M>,\n  B extends B_<M>,\n  Q extends Q_<M>,\n  R extends R_<M>,\n  Rx extends Rx_<M>,\n> = {\n  Params: SchemaTypeOption<M, P>;\n  Body: SchemaTypeOption<M, B>;\n  Reply: SchemaTypeOption<\n    M,\n    R | (Rx extends Record<number, unknown> ? Rx[number] : never)\n  >;\n  Querystring: SchemaTypeOption<M, Q>;\n};\n\ntype RouteHandlerParams<\n  M extends M_,\n  P extends P_<M>,\n  B extends B_<M>,\n  Q extends Q_<M>,\n  R extends R_<M>,\n  Rx extends Rx_<M>,\n> = FastifyRequest<FatifyZodRouteGenericInterface<M, P, B, Q, R, Rx>>;\n\ntype RouteHandler<\n  M extends M_,\n  P extends P_<M>,\n  B extends B_<M>,\n  Q extends Q_<M>,\n  R extends R_<M>,\n  Rx extends Rx_<M>,\n> = (\n  params: RouteHandlerParams<M, P, B, Q, R, Rx>,\n  reply: FastifyReply<\n    RawServerBase,\n    IncomingMessage,\n    ServerResponse,\n    FatifyZodRouteGenericInterface<M, P, B, Q, R, Rx>\n  >,\n) => Promise<\n  SchemaTypeOption<\n    M,\n    R | (Rx extends Record<number, unknown> ? Rx[number] : never)\n  >\n>;\n\ntype RouteConfig<\n  M extends M_,\n  V extends V_,\n  P extends P_<M>,\n  B extends B_<M>,\n  Q extends Q_<M>,\n  R extends R_<M>,\n  Rx extends Rx_<M>,\n> = {\n  readonly url: string;\n  readonly method: V;\n  readonly operationId: string;\n  readonly description?: string;\n  readonly params?:\n    | Exclude<P, void>\n    | {\n        readonly description: string;\n        readonly key: Exclude<P, void>;\n      };\n  readonly body?:\n    | Exclude<B, void>\n    | {\n        readonly description: string;\n        readonly key: Exclude<B, void>;\n      };\n  readonly querystring?:\n    | Exclude<Q, void>\n    | {\n        readonly description: string;\n        readonly key: Exclude<Q, void>;\n      };\n  readonly reply?:\n    | Exclude<R, void>\n    | {\n        readonly description: string;\n        readonly key: Exclude<R, void>;\n      };\n  readonly response?: Rx extends Record<number, unknown>\n    ? {\n        readonly [Code in keyof Rx]:\n          | Exclude<Rx[Code], void>\n          | {\n              readonly description: string;\n              readonly key: Exclude<Rx[Code], void>;\n            };\n      }\n    : void;\n  readonly handler: RouteHandler<M, P, B, Q, R, Rx>;\n} & FastifySchema;\n\nexport type FastifyZod<M extends M_> = {\n  readonly [Method in V_]: <\n    P extends P_<M>,\n    B extends B_<M>,\n    Q extends Q_<M>,\n    R extends R_<M>,\n    Rx extends Rx_<M>,\n  >(\n    url: string,\n    config: Omit<\n      RouteConfig<M, Method, P, B, Q, R, Rx>,\n      `url` | `method` | `schema` | `handler`\n    >,\n    handler: RouteHandler<M, P, B, Q, R, Rx>,\n  ) => void;\n};\n\nexport type FastifyZodInstance<M extends M_> = FastifyInstance & {\n  readonly zod: FastifyZod<M>;\n};\n\nexport const withRefResolver = (\n  options: FastifyDynamicSwaggerOptions,\n): FastifyDynamicSwaggerOptions => ({\n  ...options,\n  refResolver: {\n    ...options.refResolver,\n    clone: true,\n    buildLocalReference: (json, _baseUri, _fragment, i) =>\n      typeof json.$id === `string` ? json.$id : `def-${i}`,\n  },\n});\n\nexport const register = async <M extends M_>(\n  f: FastifyInstance,\n  {\n    jsonSchemas: { schemas, $ref },\n    swaggerOptions,\n    swaggerUiOptions,\n    transformSpec,\n  }: RegisterOptions<M>,\n): Promise<FastifyZodInstance<M>> => {\n  for (const schema of schemas) {\n    f.addSchema(schema);\n  }\n  await f.register(fastifySwagger, withRefResolver(swaggerOptions ?? {}));\n  if (swaggerUiOptions !== false) {\n    await f.register(fastifySwaggerUi, swaggerUiOptions ?? {});\n\n    if (transformSpec) {\n      const originalRoutePrefix =\n        swaggerUiOptions?.routePrefix ?? `/documentation`;\n      const transformedRoutePrefix =\n        transformSpec.routePrefix ?? `${originalRoutePrefix}_transformed`;\n\n      const fetchTransformedSpec = async (): Promise<unknown> => {\n        const originalSpec = await f\n          .inject({\n            method: `get`,\n            url: `${swaggerUiOptions?.routePrefix ?? `documentation`}/json`,\n          })\n          .then((res) => res.json());\n        const t = new SpecTransformer(originalSpec);\n        return t.transform(transformSpec.options);\n      };\n\n      let cachedTransformedSpec: null | Promise<unknown> = null;\n      const getTransformedSpec = async (): Promise<unknown> => {\n        if (!transformSpec.cache) {\n          return await fetchTransformedSpec();\n        }\n        if (!cachedTransformedSpec) {\n          cachedTransformedSpec = fetchTransformedSpec();\n        }\n        return await cachedTransformedSpec;\n      };\n\n      let cachedTransformedSpecJson: null | string = null;\n      const getTransformedSpecJson = async (): Promise<string> => {\n        const transformedSpec = await getTransformedSpec();\n        if (!transformSpec.cache) {\n          return JSON.stringify(transformedSpec, null, 2);\n        }\n        if (!cachedTransformedSpecJson) {\n          cachedTransformedSpecJson = JSON.stringify(transformedSpec, null, 2);\n        }\n        return cachedTransformedSpecJson;\n      };\n\n      let cachedTransformedSpecYaml: null | string = null;\n      const getTransformedSpecYaml = async (): Promise<string> => {\n        const transformedSpec = await getTransformedSpec();\n        if (!transformSpec.cache) {\n          return yaml.dump(transformedSpec);\n        }\n        if (!cachedTransformedSpecYaml) {\n          cachedTransformedSpecYaml = yaml.dump(transformedSpec);\n        }\n        return cachedTransformedSpecYaml;\n      };\n\n      f.get(`${transformedRoutePrefix}/json`, async (_request, reply) => {\n        reply.type(`application/json`);\n        return await getTransformedSpecJson();\n      });\n\n      f.get(`${transformedRoutePrefix}/yaml`, async (_request, reply) => {\n        reply.type(`text/x-yaml`);\n        return await getTransformedSpecYaml();\n      });\n    }\n  }\n\n  const addRoute = <\n    V extends V_,\n    P extends P_<M>,\n    B extends B_<M>,\n    Q extends Q_<M>,\n    R extends R_<M>,\n    Rx extends Rx_<M>,\n  >({\n    method,\n    url,\n    operationId,\n    params,\n    body,\n    reply,\n    response,\n    querystring,\n    handler,\n    ...fastifySchema\n  }: RouteConfig<M, V, P, B, Q, R, Rx>): void => {\n    const customSchema: FastifySchema = {};\n    if (operationId) {\n      customSchema.operationId = operationId;\n    }\n    if (params) {\n      customSchema.params = $ref(params as SchemaKeyOrDescription<M>);\n    }\n    if (body) {\n      customSchema.body = $ref(body as SchemaKeyOrDescription<M>);\n    }\n    if (querystring) {\n      customSchema.querystring = $ref(querystring as SchemaKeyOrDescription<M>);\n    }\n    if (reply || response) {\n      const customSchemaResponse: Record<number, ReturnType<$Ref<M>>> = {};\n      if (reply) {\n        customSchemaResponse[200] = $ref(reply as SchemaKeyOrDescription<M>);\n      }\n      if (response) {\n        for (const code of Object.keys(response)) {\n          customSchemaResponse[parseInt(code)] = $ref(\n            response[parseInt(code)] as SchemaKeyOrDescription<M>,\n          );\n        }\n      }\n      customSchema.response = customSchemaResponse;\n    }\n\n    f[method]<{\n      Params: SchemaTypeOption<M, P>;\n      Body: SchemaTypeOption<M, B>;\n      Querystring: SchemaTypeOption<M, B>;\n      Reply: SchemaTypeOption<\n        M,\n        R | (Rx extends Record<number, unknown> ? Rx[number] : never)\n      >;\n    }>(\n      url,\n      {\n        schema: {\n          ...customSchema,\n          ...fastifySchema,\n        },\n      },\n      handler as RouteHandlerMethod,\n    );\n  };\n\n  const createAddRoute =\n    <Method extends V_>(method: Method): FastifyZod<M>[Method] =>\n    (url, config, handler) =>\n      addRoute({ url, handler, method, ...config });\n\n  const pluginInstance: FastifyZod<M> = {\n    delete: createAddRoute(`delete`),\n    get: createAddRoute(`get`),\n    head: createAddRoute(`head`),\n    options: createAddRoute(`options`),\n    patch: createAddRoute(`patch`),\n    post: createAddRoute(`post`),\n    put: createAddRoute(`put`),\n  };\n\n  f.decorate(`zod`, pluginInstance);\n\n  return f as FastifyZodInstance<M>;\n};\n"],"mappings":"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"}