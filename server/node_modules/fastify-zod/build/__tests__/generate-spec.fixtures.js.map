{"version":3,"file":"generate-spec.fixtures.js","names":["_promises","require","_path","_","_models","_server","main","f","createTestServer","jsonSchemas","buildJsonSchemas","models","transformSpec","options","swaggerOptions","openApiOptions","swaggerUiOptions","originalSpec","inject","method","url","then","res","json","writeFile","join","__dirname","JSON","stringify","encoding","transformedSpecJson","body","transformedSpecYaml","catch","error","console","process","exit"],"sources":["../../src/__tests__/generate-spec.fixtures.ts"],"sourcesContent":["import { writeFile } from \"fs/promises\";\nimport { join } from \"path\";\n\nimport { buildJsonSchemas } from \"..\";\n\nimport { models } from \"./models.fixtures\";\nimport {\n  createTestServer,\n  openApiOptions,\n  swaggerUiOptions,\n} from \"./server.fixtures\";\n\nconst main = async (): Promise<void> => {\n  const f = await createTestServer(\n    {},\n    {\n      jsonSchemas: buildJsonSchemas(models, {}),\n      transformSpec: { options: {} },\n      swaggerOptions: {\n        ...openApiOptions,\n      },\n      swaggerUiOptions,\n    },\n  );\n\n  const originalSpec = await f\n    .inject({\n      method: `get`,\n      url: `/documentation/json`,\n    })\n    .then((res) => res.json());\n\n  await writeFile(\n    join(__dirname, `..`, `..`, `openapi.original.json`),\n    JSON.stringify(originalSpec, null, 2),\n    { encoding: `utf-8` },\n  );\n\n  const transformedSpecJson = await f\n    .inject({\n      method: `get`,\n      url: `/documentation_transformed/json`,\n    })\n    .then((res) => res.body);\n\n  await writeFile(\n    join(__dirname, `..`, `..`, `openapi.transformed.json`),\n    transformedSpecJson,\n    { encoding: `utf-8` },\n  );\n\n  const transformedSpecYaml = await f\n    .inject({\n      method: `get`,\n      url: `/documentation_transformed/yaml`,\n    })\n    .then((res) => res.body);\n\n  await writeFile(\n    join(__dirname, `..`, `..`, `openapi.transformed.yml`),\n    transformedSpecYaml,\n    { encoding: `utf-8` },\n  );\n};\n\nmain().catch((error) => {\n  console.error(error);\n  process.exit(1);\n});\n"],"mappings":";;AAAA,IAAAA,SAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AAEA,IAAAE,CAAA,GAAAF,OAAA;AAEA,IAAAG,OAAA,GAAAH,OAAA;AACA,IAAAI,OAAA,GAAAJ,OAAA;AAMA,MAAMK,IAAI,GAAG,MAAAA,CAAA,KAA2B;EACtC,MAAMC,CAAC,GAAG,MAAM,IAAAC,wBAAgB,EAC9B,CAAC,CAAC,EACF;IACEC,WAAW,EAAE,IAAAC,kBAAgB,EAACC,cAAM,EAAE,CAAC,CAAC,CAAC;IACzCC,aAAa,EAAE;MAAEC,OAAO,EAAE,CAAC;IAAE,CAAC;IAC9BC,cAAc,EAAE;MACd,GAAGC;IACL,CAAC;IACDC,gBAAgB,EAAhBA;EACF,CACF,CAAC;EAED,MAAMC,YAAY,GAAG,MAAMV,CAAC,CACzBW,MAAM,CAAC;IACNC,MAAM,EAAG,KAAI;IACbC,GAAG,EAAG;EACR,CAAC,CAAC,CACDC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EAE5B,MAAM,IAAAC,mBAAS,EACb,IAAAC,UAAI,EAACC,SAAS,EAAG,IAAG,EAAG,IAAG,EAAG,uBAAsB,CAAC,EACpDC,IAAI,CAACC,SAAS,CAACX,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,EACrC;IAAEY,QAAQ,EAAG;EAAO,CACtB,CAAC;EAED,MAAMC,mBAAmB,GAAG,MAAMvB,CAAC,CAChCW,MAAM,CAAC;IACNC,MAAM,EAAG,KAAI;IACbC,GAAG,EAAG;EACR,CAAC,CAAC,CACDC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACS,IAAI,CAAC;EAE1B,MAAM,IAAAP,mBAAS,EACb,IAAAC,UAAI,EAACC,SAAS,EAAG,IAAG,EAAG,IAAG,EAAG,0BAAyB,CAAC,EACvDI,mBAAmB,EACnB;IAAED,QAAQ,EAAG;EAAO,CACtB,CAAC;EAED,MAAMG,mBAAmB,GAAG,MAAMzB,CAAC,CAChCW,MAAM,CAAC;IACNC,MAAM,EAAG,KAAI;IACbC,GAAG,EAAG;EACR,CAAC,CAAC,CACDC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACS,IAAI,CAAC;EAE1B,MAAM,IAAAP,mBAAS,EACb,IAAAC,UAAI,EAACC,SAAS,EAAG,IAAG,EAAG,IAAG,EAAG,yBAAwB,CAAC,EACtDM,mBAAmB,EACnB;IAAEH,QAAQ,EAAG;EAAO,CACtB,CAAC;AACH,CAAC;AAEDvB,IAAI,CAAC,CAAC,CAAC2B,KAAK,CAAEC,KAAK,IAAK;EACtBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACpBE,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC"}